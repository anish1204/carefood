// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  city          String
  phoneNumber   String    @unique
  funFood       String
  orders        Order[]
  ngos          Ngos[]
}

model Ngos {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  items          Item[]
  orderTime      DateTime
  restaurantName String
  address        String
  orderStatus    String
  totalAmt       Int
  userEmail      String
  user           User     @relation(fields: [userEmail], references: [email])

  @@unique([id, userEmail]) // Define a unique constraint on the combination of id and userEmail
}

model Item {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  quantity Int
  price    Float
  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id]) // Define opposite relation
}

model Tokens {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  currentTime    DateTime
  expirationTime DateTime
}

model Ngopapers {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  directorName String
  address      String
  email        String
  city         String
  description  String
  workforce    Int
  phoneNumber  Int
}

model Donatedfood {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  totalAmt  Int
  date      DateTime
  ngo       String
  fooditems Donateditems[]
}

model Donateditems {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  price       Float
  orderId     String      @db.ObjectId
  donatedFood Donatedfood @relation(fields: [orderId], references: [id]) // Define opposite relation
}
